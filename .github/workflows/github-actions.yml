# To test locally, you can use the `act` tool (https://github.com/nektos/act)
# act pull_request / act -j test
# You may use `--reuse --rm` options to keep container running
# between two executions : .venv environment is kept.

name: Testing pull requests
on: [pull_request, workflow_dispatch]
env:
  POETRY_HOME: /etc/poetry

jobs:
  test:
    runs-on: ubuntu-latest
    container: python:3.7
    steps:
    ## Prepare environment for testing
      - name: "[SETUP] Checkout"
        uses: actions/checkout@v3
      - uses: ./.github/actions/prepare_poetry_env
        with:
          home: $POETRY_HOME
      - if: ${{ !env.ACT }}
        name: "[SETUP] Cache .venv"
        uses: actions/cache@v3
        with:
          key: ${{ hashFiles('poetry.lock') }}
          path: .venv
      - name: "[SETUP] Install dependencies"
        run: |
          poetry lock --check || FAILED=true
          if [ $FAILED ]; then poetry lock --no-update; exit 1; fi # update lock file if check fails
          poetry install --with=docs --all-extras --sync
          source .venv/bin/activate
          pip list
        shell: bash
    ## Load artifact if setup fails
      - if: ${{ !env.ACT && failure() }}
        name: "[SETUP] Upload poetry.lock file to commit"
        uses: actions/upload-artifact@v3
        with:
          name: "Poetry lock file to commit"
          path: poetry.lock
      - name: "[SETUP] Install test packages"
        run: |
          DEBIAN_FRONTEND=noninteractive apt update
          DEBIAN_FRONTEND=noninteractive apt install -y graphviz libsndfile1
    ## Linting
      - name: "[TEST] Linting"
        run: |
          . .venv/bin/activate
          echo "Executing linting..."
          pre-commit run --all-files
    ## Unit tests
      - name: "[TEST] Run unit tests"
        run: |
          . .venv/bin/activate
          echo "Executing unit tests..."
          coverage run -m pytest -rsv --junit-xml=report.xml tests/unit
          coverage report
          coverage xml
