image: python:3.7

# Trigger the pipeline on develop/main branches and all MRs (except develop merge to main)
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME != "develop"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_COMMIT_TAG'

stages:
  - setup
  - test
  - publish

variables:
  GIT_DEPTH: 1
  POETRY_HOME: /etc/poetry

.use_cache_tags:
  tags:
    - docker-cache

# Define a default cache per branch
cache: &default_cache
  key: $CI_COMMIT_BRANCH
  paths:
    - poetry.lock
    - .venv
  policy: pull

.prepare_python_env: &prepare_python_env
  - curl -sSL https://install.python-poetry.org | python3 -
  - export PATH=$PATH:$POETRY_HOME/bin
  - poetry --version
  - poetry env use python3.7
  - poetry env info
  - poetry update
  - poetry install -E optional -E hf-translator

.install_gcc: &install_gcc
 - apt update
 - apt install -y gcc g++


.medkit-docs-jobs:
  tags:
    - linux
  image: condaforge/mambaforge
  before_script:
    - DEBIAN_FRONTEND=noninteractive apt update
    - DEBIAN_FRONTEND=noninteractive apt install -y graphviz
    - mamba env create -f docs/environment.yml
    - source /opt/conda/bin/activate
    - conda init bash
    - source ~/.bashrc
    - conda activate medkit-docs
  interruptible: true


# ------- Jobs declaration --------

# Set up cache for all pipeline jobs
setup_cache:
  stage: setup
  extends: .use_cache_tags
  cache:
    <<: *default_cache
    policy: pull-push
  script:
    - *prepare_python_env
    - source ./.venv/bin/activate
    - pip list


# Declare testing jobs
.test_jobs:
  stage: test
  extends: .use_cache_tags
  needs: [setup_cache]
  cache: *default_cache
  before_script:
    - *install_gcc
    - source ./.venv/bin/activate

linting:
  extends: .test_jobs
  script:
    - flake8 --version
    - black --version
    - echo "Executing linting..."
    - flake8 medkit
    - black --check medkit
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - when: always

unit_tests:
  extends: .test_jobs
  script:
    - echo "Executing unit tests..."
    - coverage run -m pytest -v --junit-xml=report.xml tests/unit
    - coverage report
    - coverage xml
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - when: always

# TODO: activate weekly job to verify non-regression ?
large_tests:
  extends: .test_jobs
  script:
    - echo "Executing large tests..."
    - pytest -v tests/large
  rules:
    - when: never

# Declare release jobs
release:
  stage: publish
  script:
    - *prepare_python_env
    - poetry build
    - poetry config repositories.gitlab "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi"
    - poetry publish -r gitlab -u gitlab-ci-token -p ${CI_JOB_TOKEN}
  rules:
    - if: '$CI_COMMIT_TAG'

# Declare documentation jobs
doc-test:
  extends: .medkit-docs-jobs
  stage: test
  script:
    - jb build docs
    - mv docs/_build/jupyter_execute .
    - mv docs/_build/html test
  artifacts:
    paths:
      - test
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - when: always

doc-release:
  extends: .medkit-docs-jobs
  stage: test
  script:
    - jb build docs
    - mv docs/_build/jupyter_execute .
    - mv docs/_build/html public
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_TAG'

