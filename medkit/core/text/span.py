from __future__ import annotations

__all__ = [
    "Span",
    "ModifiedSpan",
    "AnySpanType",
]

import dataclasses
from typing import Any, Dict, List, NamedTuple, Union
from typing_extensions import TypeAlias

from medkit.core.dict_serialization import dict_serializable, serialize, deserialize


@dict_serializable
class Span(NamedTuple):
    """
    Slice of text extracted from the original text

    Parameters
    ----------
    start: int
        Index of the first character in the original text
    end: int
        Index of the last character in the original text, plus one
    """

    start: int
    end: int

    @property
    def length(self):
        return self.end - self.start

    def to_dict(self) -> Dict[str, Any]:
        return dict(start=self.start, end=self.end)

    def overlaps(self, other: Span):
        """Test if 2 spans reference at least one character in common"""
        return (self.start < other.end) and (self.end > other.start)

    @classmethod
    def from_dict(cls, span_dict: Dict[str, Any]) -> Span:
        """
        Creates a Span from a dict

        Parameters
        ----------
        span_dict: dict
            A dictionary from a serialized span as generated by to_dict()
        """
        return cls(**span_dict)


@dict_serializable
@dataclasses.dataclass
class ModifiedSpan:
    """
    Slice of text not present in the original text

    Parameters
    ----------
    length:
        Number of characters
    replaced_spans:
        Slices of the original text that this span is replacing
    """

    length: int
    replaced_spans: List[Span]

    def to_dict(self) -> Dict[str, Any]:
        replaced_spans = [serialize(s) for s in self.replaced_spans]
        return dict(
            length=self.length,
            replaced_spans=replaced_spans,
        )

    @classmethod
    def from_dict(cls, modified_span_dict: Dict[str, Any]) -> ModifiedSpan:
        """
        Creates a Modified from a dict

        Parameters
        ----------
        modified_span_dict: dict
            A dictionary from a serialized ModifiedSpan as generated by to_dict()
        """

        replaced_spans = [deserialize(s) for s in modified_span_dict["replaced_spans"]]
        return cls(modified_span_dict["length"], replaced_spans)


AnySpanType: TypeAlias = Union[Span, ModifiedSpan]
