from __future__ import annotations

__all__ = ["TextAnnotation", "Segment", "Entity", "Relation"]

import abc
import dataclasses
from typing import Any, ClassVar, Dict, List, Optional, Set, TYPE_CHECKING

from medkit.core.attribute import Attribute
from medkit.core.attribute_container import AttributeContainer
from medkit.core.id import generate_id
from medkit.core.store import Store
from medkit.core.text.normalization import EntityNormalization
from medkit.core.text.span import AnySpan, AnySpanType
import medkit.core.text.span_utils as span_utils

if TYPE_CHECKING:
    from medkit.core.text.document import TextDocument


@dataclasses.dataclass(init=False)
class TextAnnotation(abc.ABC):
    """Base abstract class for all text annotations

    Attributes
    ----------
    uid:
        Unique identifier of the annotation.
    label:
        The label for this annotation (e.g., SENTENCE)
    attrs:
        Attributes of the annotation. Stored in a
        :class:{~medkit.core.AttributeContainer} but can be passed as a list at
        init.
    metadata:
        The metadata of the annotation
    keys:
        Pipeline output keys to which the annotation belongs to.
    """

    uid: str
    label: str
    attrs: AttributeContainer
    metadata: Dict[str, Any]
    keys: Set[str]

    @abc.abstractmethod
    def __init__(
        self,
        label: str,
        attrs: Optional[List[Attribute]] = None,
        metadata: Optional[Dict[str, Any]] = None,
        uid: Optional[str] = None,
    ):
        if attrs is None:
            attrs = []
        if metadata is None:
            metadata = {}
        if uid is None:
            uid = generate_id()

        self.uid = uid
        self.label = label
        self.metadata = metadata
        self.keys = set()

        self.attrs = AttributeContainer()
        for attr in attrs:
            self.attrs.add(attr)

    @abc.abstractmethod
    def to_dict(self) -> Dict[str, Any]:
        attrs = [a.to_dict() for a in self.attrs]
        return dict(
            uid=self.uid,
            label=self.label,
            attrs=attrs,
            metadata=self.metadata,
            class_name=self.__class__.__name__,
        )


@dataclasses.dataclass(init=False)
class Segment(TextAnnotation):
    """
    Text segment referencing part of an {class}`~medkit.core.text.TextDocument`.

    Attributes
    ----------
    uid:
        The segment identifier.
    label:
        The label for this segment (e.g., SENTENCE)
    text:
        Text of the segment.
    spans:
        List of spans indicating which parts of the segment text correspond to
        which part of the document's full text.
    attrs:
        Attributes of the segment. Stored in a
        :class:{~medkit.core.AttributeContainer} but can be passed as a list at
        init.
    metadata:
        The metadata of the segment
    keys:
        Pipeline output keys to which the segment belongs to.
    """

    spans: List[AnySpanType]
    text: str

    def __init__(
        self,
        label: str,
        text: str,
        spans: List[AnySpanType],
        attrs: Optional[List[Attribute]] = None,
        metadata: Optional[Dict[str, Any]] = None,
        uid: Optional[str] = None,
        store: Optional[Store] = None,
    ):
        super().__init__(label=label, attrs=attrs, metadata=metadata, uid=uid)

        self.text = text
        self.spans = spans

    def to_dict(self) -> Dict[str, Any]:
        data = super().to_dict()
        data.update(text=self.text, spans=[s.to_dict() for s in self.spans])
        data.update(class_name=self.__class__.__name__)
        return data

    @classmethod
    def from_dict(cls, segment_dict: Dict[str, Any]) -> Segment:
        """
        Creates a Segment from a dict

        Parameters
        ----------
        segment_dict: dict
            A dictionary from a serialized segment as generated by to_dict()
        """

        attrs = [Attribute.from_dict(a) for a in segment_dict["attrs"]]
        spans = [AnySpan.from_dict(span) for span in segment_dict["spans"]]
        segment = cls(
            uid=segment_dict["uid"],
            label=segment_dict["label"],
            attrs=attrs,
            text=segment_dict["text"],
            spans=spans,
            metadata=segment_dict["metadata"],
        )

        return segment

    def get_snippet(self, doc: TextDocument, max_extend_length: int) -> str:
        """Return a portion of the original text contaning the annotation

        Parameters
        ----------
        doc:
            The document to which the annotation is attached

        max_extend_length:
            Maximum number of characters to use around the annotation

        Returns
        -------
        str:
            A portion of the text around the annotation
        """
        spans_normalized = span_utils.normalize_spans(self.spans)
        start = min(s.start for s in spans_normalized)
        end = max(s.end for s in spans_normalized)
        start_extended = max(start - max_extend_length // 2, 0)
        remaining_max_extend_length = max_extend_length - (start - start_extended)
        end_extended = min(end + remaining_max_extend_length, len(doc.text))
        return doc.text[start_extended:end_extended]


@dataclasses.dataclass(init=False)
class Entity(Segment):
    """
    Text entity referencing part of an {class}`~medkit.core.text.TextDocument`.

    Attributes
    ----------
    uid:
        The entity identifier.
    label:
        The label for this entity (e.g., DISEASE)
    text:
        Text of the entity.
    spans:
        List of spans indicating which parts of the entity text correspond to
        which part of the document's full text.
    attrs:
        Attributes of the entity. Stored in a
        :class:{~medkit.core.AttributeContainer} but can be passed as a list at
        init.
    metadata:
        The metadata of the entity
    keys:
        Pipeline output keys to which the entity belongs to.
    """

    NORM_LABEL: ClassVar[str] = "NORMALIZATION"
    """
    Label to use for normalization attributes
    """

    def to_dict(self) -> Dict[str, Any]:
        data = super().to_dict()
        data.update(class_name=self.__class__.__name__)
        return data

    @classmethod
    def from_dict(cls, entity_dict: Dict[str, Any]) -> Segment:
        """
        Creates an Entity from a dict

        Parameters
        ----------
        entity_dict: dict
            A dictionary from a serialized entity as generated by to_dict()
        """
        attrs = [Attribute.from_dict(a) for a in entity_dict["attrs"]]
        spans = [AnySpan.from_dict(span) for span in entity_dict["spans"]]

        entity = cls(
            uid=entity_dict["uid"],
            label=entity_dict["label"],
            attrs=attrs,
            spans=spans,
            text=entity_dict["text"],
            metadata=entity_dict["metadata"],
        )

        return entity

    def add_norm(self, normalization: EntityNormalization) -> Attribute:
        """
        Attach an :class:`~medkit.core.text.normalization.EntityNormalization`
        object to the entity.

        This helper will wrap `normalization` in an
        :class:`~medkit.core.annotation.Attribute` with
        :attr:`Entity.NORM_LABEL` as label and add it to the entity.

        Returns
        -------
        Attribute:
            The attribute that was created and added to the entity
        """

        attr = Attribute(label=self.NORM_LABEL, value=normalization)
        self.attrs.add(attr)
        return attr

    def get_norms(self) -> List[EntityNormalization]:
        """
        Return all :class:`~medkit.core.text.normalization.EntityNormalization`
        objects attached to the entity.

        This helper will retrieve all the entity attributes with
        :attr:`Entity.NORM_LABEL` as label and return their
        :class:`~medkit.core.text.normalization.EntityNormalization` values.

        Returns
        -------
        List[EntityNormalization]:
            All normalizations attached to the entity.
        """
        return [a.value for a in self.attrs.get(label=self.NORM_LABEL)]


@dataclasses.dataclass(init=False)
class Relation(TextAnnotation):
    """
    Relation between two text entities.

    Attributes
    ----------
    uid:
        The identifier of the relation
    label:
        The relation label
    source_id:
        The identifier of the entity from which the relation is defined
    target_id:
        The identifier of the entity to which the relation is defined
    attrs:
        The attributes of the relation
    metadata:
        The metadata of the relation
    keys:
        Pipeline output keys to which the relation belongs to
    """

    source_id: str
    target_id: str

    def __init__(
        self,
        label: str,
        source_id: str,
        target_id: str,
        attrs: Optional[List[Attribute]] = None,
        metadata: Optional[Dict[str, Any]] = None,
        uid: Optional[str] = None,
        store: Optional[Store] = None,
    ):
        super().__init__(label=label, attrs=attrs, metadata=metadata, uid=uid)

        self.source_id = source_id
        self.target_id = target_id

    def to_dict(self) -> Dict[str, Any]:
        data = super().to_dict()
        data.update(
            source_id=self.source_id,
            target_id=self.target_id,
            class_name=self.__class__.__name__,
        )
        return data

    @classmethod
    def from_dict(cls, relation_dict):
        """
        Creates a Relation from a dict

        Parameters
        ----------
        relation_dict: dict
            A dictionary from a serialized relation as generated by to_dict()
        """

        attrs = [Attribute.from_dict(a) for a in relation_dict["attrs"]]

        relation = cls(
            uid=relation_dict["uid"],
            label=relation_dict["label"],
            attrs=attrs,
            source_id=relation_dict["source_id"],
            target_id=relation_dict["target_id"],
            metadata=relation_dict["metadata"],
        )

        return relation
