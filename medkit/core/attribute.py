from __future__ import annotations

__all__ = ["Attribute"]

import dataclasses
from typing import Any, Dict, Optional

from medkit.core.dict_serialization import DictSerializable
from medkit.core.id import generate_id


@dataclasses.dataclass
class Attribute:
    """
    Medkit attribute, to be added to an annotation

    Attributes
    ----------
    label:
        The attribute label
    value:
        The value of the attribute
    metadata:
        The metadata of the attribute
    uid:
        The identifier of the attribute
    """

    label: str
    value: Optional[Any] = None
    metadata: Dict[str, Any] = dataclasses.field(default_factory=dict)
    uid: str = dataclasses.field(default_factory=generate_id)

    def to_dict(self) -> Dict[str, Any]:
        # handle non-scalar value
        if isinstance(self.value, DictSerializable):
            value = self.to_dict()
        else:
            value = value

        return dict(
            uid=self.uid,
            label=self.label,
            value=value,
            metadata=self.metadata,
            class_name=self.__class__.__name__,
        )

    def copy(self) -> Attribute:
        """
        Create a new attribute that is a copy of the current instance, but
        with a new identifier

        This is used when we want to duplicate an existing attribute onto a
        different annotation.
        """
        return dataclasses.replace(self, uid=generate_id())

    @classmethod
    def from_dict(cls, attribute_dict: Dict[str, Any]) -> Attribute:
        """
        Creates an Attribute from a dict

        Parameters
        ----------
        attribute_dict: dict
            A dictionary from a serialized Attribute as generated by to_dict()
        """

        # handle non-scalar value
        # TODO this doesn't scale well
        if (
            isinstance(attribute_dict["value"], Dict[str, Any])
            and "class_name" in attribute_dict["value"]
        ):
            value_dict = attribute_dict["value"]
            if value_dict["class_name"] == "EntityNormalization":
                # TODO medkit.core should not import from medkit.core.text
                from medkit.core.text.normalization import (
                    EntityNormalization,
                )  # noqa: E402

                value = EntityNormalization.from_dict(value_dict)
            elif value_dict["class_name"] == "UMLSNormalization":
                # TODO medkit.core should not import from medkit.text  # noqa: E402
                from medkit.text.ner import UMLSNormalization

                value = UMLSNormalization.from_dict(value_dict)
            else:
                raise NotImplementedError(
                    "Can't deserialize attribute value with class_name '{class_name}}'"
                )
        else:
            value = attribute_dict["value"]

        return cls(
            uid=attribute_dict["uid"],
            label=attribute_dict["label"],
            value=value,
            metadata=attribute_dict["metadata"],
        )
