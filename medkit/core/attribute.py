from __future__ import annotations

__all__ = ["Attribute"]

import dataclasses
from typing import Any, Dict, Optional, Type

from medkit.core import dict_conv
from medkit.core.id import generate_id


@dataclasses.dataclass
class Attribute:
    """
    Medkit attribute, to be added to an annotation

    Attributes
    ----------
    label:
        The attribute label
    value:
        The value of the attribute. Should be either simple built-in types (int,
        float, bool, str) or collections of these types (list, dict, tuple). If
        you need structured complex data you should create a subclass of
        `Attribute`.
    metadata:
        The metadata of the attribute
    uid:
        The identifier of the attribute
    """

    label: str
    value: Optional[Any] = None
    metadata: Dict[str, Any] = dataclasses.field(default_factory=dict)
    uid: str = dataclasses.field(default_factory=generate_id)

    def __init__(
        self,
        label: str,
        value: Optional[Any] = None,
        metadata: Optional[Dict[str, Any]] = None,
        uid: Optional[str] = None,
    ):
        if metadata is None:
            metadata = {}
        if uid is None:
            uid = generate_id()

        self.uid = uid
        self.label = label
        self.value = value
        self.metadata = metadata

    def __init_subclass__(cls):
        super().__init_subclass__()
        # type-annotated intermediary variable needed to keep mypy happy
        parent_class: Type = Attribute
        dict_conv.register_subclass(parent_class, cls)

    def to_dict(self) -> Dict[str, Any]:
        attribute_dict = dict(
            uid=self.uid,
            label=self.label,
            value=self.value,
            metadata=self.metadata,
        )
        dict_conv.add_class_name_to_data_dict(self, attribute_dict)
        return attribute_dict

    def copy(self) -> Attribute:
        """
        Create a new attribute that is a copy of the current instance, but
        with a new identifier

        This is used when we want to duplicate an existing attribute onto a
        different annotation.
        """
        return dataclasses.replace(self, uid=generate_id())

    @staticmethod
    def from_dict(attribute_dict: Dict[str, Any]) -> Attribute:
        """
        Creates an Attribute from a dict

        Parameters
        ----------
        attribute_dict: dict
            A dictionary from a serialized Attribute as generated by to_dict()
        """

        # dispatch to subclass from_dict() if class_name in dict corresponds to a subclass
        if not dict_conv.check_class_matches_data_dict(
            Attribute, attribute_dict, should_raise=False
        ):
            subclass = dict_conv.get_subclass_for_data_dict(Attribute, attribute_dict)
            return subclass.from_dict(attribute_dict)

        return Attribute(
            uid=attribute_dict["uid"],
            label=attribute_dict["value"],
            value=attribute_dict["value"],
            metadata=attribute_dict["metadata"],
        )
