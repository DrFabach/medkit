from __future__ import annotations

__all__ = ["Attribute"]

from typing import Any, Dict, Optional

from medkit.core.id import generate_id


class Attribute:
    def __init__(
        self,
        label: str,
        value: Optional[Any] = None,
        uid: Optional[str] = None,
        metadata: Optional[Dict[str, Any]] = None,
    ):
        """
        Initialize a medkit attribute, to be added to an annotation

        Parameters
        ----------
        label: str
            The attribute label
        value: str, Optional
            The value of the attribute
        uid: str, Optional
            The identifier of the attribute (if existing)
        metadata: Dict[str, Any], Optional
            The metadata of the attribute
        """
        if uid is None:
            uid = generate_id()
        if metadata is None:
            metadata = {}

        self.uid: str = uid
        self.label: str = label
        self.value: Optional[Any] = value
        self.metadata: Dict[str, Any] = metadata

    def to_dict(self) -> Dict[str, Any]:
        return dict(
            uid=self.uid,
            label=self.label,
            value=self.value,
            metadata=self.metadata,
        )

    @classmethod
    def from_dict(cls, attribute_dict: Dict[str, Any]) -> Attribute:
        """
        Creates an Attribute from a dict

        Parameters
        ----------
        attribute_dict: dict
            A dictionary from a serialized Attribute as generated by to_dict()
        """
        return cls(
            uid=attribute_dict["uid"],
            label=attribute_dict["label"],
            value=attribute_dict["value"],
            metadata=attribute_dict["metadata"],
        )

    def __repr__(self):
        return (
            f"{self.__class__.__qualname__} : uid={self.uid!r}, label={self.label!r},"
            f" value={self.value}"
        )
