from __future__ import annotations

__all__ = ["Attribute"]

import dataclasses
from typing import Any, Dict, Optional

from medkit.core.dict_serialization import (
    DictSerializable,
    dict_serializable,
    is_deserializable,
    serialize,
    deserialize,
)
from medkit.core.id import generate_id


@dict_serializable
@dataclasses.dataclass
class Attribute:
    """
    Medkit attribute, to be added to an annotation

    Attributes
    ----------
    label:
        The attribute label
    value:
        The value of the attribute
    metadata:
        The metadata of the attribute
    uid:
        The identifier of the attribute
    """

    label: str
    value: Optional[Any] = None
    metadata: Dict[str, Any] = dataclasses.field(default_factory=dict)
    uid: str = dataclasses.field(default_factory=generate_id)

    def to_dict(self, deep: bool = False) -> Dict[str, Any]:
        value = self.value
        # handle non-scalar value
        if isinstance(value, DictSerializable):
            value = serialize(value)

        return dict(
            uid=self.uid,
            label=self.label,
            value=value,
            metadata=self.metadata,
        )

    def copy(self) -> Attribute:
        """
        Create a new attribute that is a copy of the current instance, but
        with a new identifier

        This is used when we want to duplicate an existing attribute onto a
        different annotation.
        """
        return dataclasses.replace(self, uid=generate_id())

    @classmethod
    def from_dict(cls, attribute_dict: Dict[str, Any]) -> Attribute:
        """
        Creates an Attribute from a dict

        Parameters
        ----------
        attribute_dict: dict
            A dictionary from a serialized Attribute as generated by to_dict()
        """

        value = attribute_dict["value"]
        # handle non-scalar value
        if is_deserializable(value):
            value = deserialize(value)
        return cls(
            uid=attribute_dict["uid"],
            label=attribute_dict["label"],
            value=value,
            metadata=attribute_dict["metadata"],
        )
